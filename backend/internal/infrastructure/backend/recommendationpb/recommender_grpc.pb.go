// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: proto/recommender.proto

package recommendationpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Recommender_GetRecommendations_FullMethodName = "/recommendation.Recommender/GetRecommendations"
)

// RecommenderClient is the client API for Recommender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecommenderClient interface {
	// Method to get recommendations
	GetRecommendations(ctx context.Context, in *RecommendationRequest, opts ...grpc.CallOption) (*RecommendationResponse, error)
}

type recommenderClient struct {
	cc grpc.ClientConnInterface
}

func NewRecommenderClient(cc grpc.ClientConnInterface) RecommenderClient {
	return &recommenderClient{cc}
}

func (c *recommenderClient) GetRecommendations(ctx context.Context, in *RecommendationRequest, opts ...grpc.CallOption) (*RecommendationResponse, error) {
	out := new(RecommendationResponse)
	err := c.cc.Invoke(ctx, Recommender_GetRecommendations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecommenderServer is the server API for Recommender service.
// All implementations must embed UnimplementedRecommenderServer
// for forward compatibility
type RecommenderServer interface {
	// Method to get recommendations
	GetRecommendations(context.Context, *RecommendationRequest) (*RecommendationResponse, error)
	mustEmbedUnimplementedRecommenderServer()
}

// UnimplementedRecommenderServer must be embedded to have forward compatible implementations.
type UnimplementedRecommenderServer struct {
}

func (UnimplementedRecommenderServer) GetRecommendations(context.Context, *RecommendationRequest) (*RecommendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendations not implemented")
}
func (UnimplementedRecommenderServer) mustEmbedUnimplementedRecommenderServer() {}

// UnsafeRecommenderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecommenderServer will
// result in compilation errors.
type UnsafeRecommenderServer interface {
	mustEmbedUnimplementedRecommenderServer()
}

func RegisterRecommenderServer(s grpc.ServiceRegistrar, srv RecommenderServer) {
	s.RegisterService(&Recommender_ServiceDesc, srv)
}

func _Recommender_GetRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommenderServer).GetRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recommender_GetRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommenderServer).GetRecommendations(ctx, req.(*RecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Recommender_ServiceDesc is the grpc.ServiceDesc for Recommender service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recommender_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recommendation.Recommender",
	HandlerType: (*RecommenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecommendations",
			Handler:    _Recommender_GetRecommendations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/recommender.proto",
}
